{"version":3,"sources":["Navbar.js","Category.js","Order.js","Taco.js","MyOrders.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Category","props","optionComponents","options","map","option","type","name","onChange","handleChange","selected","Order","onClick","state","shells","baseLayers","mixins","condiments","seasonings","Taco","i","items","all","shell","baseLayer","mixin","condiment","seasoning","categories","length","ingredients","filter","value","index","arr","ingredient","orderNumber","MyOrders","made","tacos","taco","App","bind","handleClick","newSelected","list","containsIngredientType","push","this","setState","prevState","newMade","unshift","alert","types","justMade","random","Math","floor","num","shellAPICall","fetch","baseLayersAPICall","mixinAPICall","condimentsAPICall","seasoningsAPICall","Promise","then","responses","response","json","path","exact","render","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wRAeeA,MAXf,WACE,OACI,yBAAKC,UAAY,UACf,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAY,SAAzB,SACA,wBAAIA,UAAY,SACd,4BAAI,kBAAC,IAAD,CAAMC,GAAI,aAAV,gBCQCC,MAdf,SAAkBC,GAChB,IAAMC,EAAmBD,EAAME,QAAQC,KAAI,SAAAC,GAAM,OAC/C,yBAAKP,UAAW,uBACd,2BAAOQ,KAAK,QAAQC,KAAON,EAAMK,KAAME,SAAY,kBAAIP,EAAMQ,aAAaJ,EAAQJ,EAAMS,SAAUT,EAAMK,SAD1G,KACqHD,EAAOE,SAG9H,OACE,6BACE,2CAAiBN,EAAMK,MACtBJ,ICcQS,MArBf,SAAeV,GACb,OACE,yBAAKH,UAAY,SACf,kBAAC,IAAD,CAAMC,GAAG,aACP,4BAAQa,QAAW,kBAAIX,EAAMW,QAAQ,KAArC,6BAEF,kDACA,kBAAC,EAAD,CAAUN,KAAOL,EAAMY,MAAMC,OAAOR,KAAMH,QAAWF,EAAMY,MAAMC,OAAOX,QAASO,SAAYT,EAAMY,MAAMH,SAAUD,aAAgBR,EAAMQ,eACzI,kBAAC,EAAD,CAAUH,KAAOL,EAAMY,MAAME,WAAWT,KAAMH,QAAWF,EAAMY,MAAME,WAAWZ,QAASO,SAAYT,EAAMY,MAAMH,SAAUD,aAAgBR,EAAMQ,eACjJ,kBAAC,EAAD,CAAUH,KAAOL,EAAMY,MAAMG,OAAOV,KAAMH,QAAWF,EAAMY,MAAMG,OAAOb,QAASO,SAAYT,EAAMY,MAAMH,SAAUD,aAAgBR,EAAMQ,eACzI,kBAAC,EAAD,CAAUH,KAAOL,EAAMY,MAAMI,WAAWX,KAAMH,QAAWF,EAAMY,MAAMI,WAAWd,QAASO,SAAYT,EAAMY,MAAMH,SAAUD,aAAgBR,EAAMQ,eACjJ,kBAAC,EAAD,CAAUH,KAAOL,EAAMY,MAAMK,WAAWZ,KAAMH,QAAWF,EAAMY,MAAMK,WAAWf,QAASO,SAAYT,EAAMY,MAAMH,SAAUD,aAAgBR,EAAMQ,eACjJ,yBAAKX,UAAW,gBACd,kBAAC,IAAD,CAAMC,GAAG,aACP,4BAAQa,QAAW,kBAAIX,EAAMW,QAAQ,KAArC,sBCcKO,MA9Bf,SAAclB,GACZ,IAOImB,EACAC,EARAC,EAAM,CACRC,MAAO,KACPC,UAAW,KACXC,MAAO,KACPC,UAAW,KACXC,UAAW,MAITC,EAAa,CAAC,QAAS,YAAa,QAAS,YAAa,aAC9D,IAAKR,EAAI,EAAGA,EAAIQ,EAAWC,OAAQT,IAId,IAHnBC,EAAQpB,EAAM6B,YAAYC,QAAO,SAASC,EAAOC,EAAOC,GACtD,OAAOF,EAAM1B,MAAQsB,EAAWR,OAExBS,SACRP,EAAIM,EAAWR,IAAMC,EAAM,GAAGc,WAAW5B,MAI7C,OACE,6BACE,sCAAYN,EAAMmC,aAClB,gEAAsCd,EAAIC,MAA1C,WAAyDD,EAAIE,UAA7D,eAAoFF,EAAIG,MAAxF,WAAuGH,EAAII,UAA3G,mBACKJ,EAAIK,UADT,eAEA,4BAAQ7B,UAAY,YAAYc,QAAW,kBAAIX,EAAMW,QAAQ,EAAGX,EAAMmC,eAAtE,oBCESC,MAzBf,SAAkBpC,GAChB,GAAyB,GAArBA,EAAMqC,KAAKT,OACb,OACE,yBAAK/B,UAAY,YACf,6CACA,kBAAC,IAAD,CAAMC,GAAG,KACP,kDAMN,IAAMwC,EAAQtC,EAAMqC,KAAKlC,KAAI,SAACoC,GAAD,OAC3B,kBAAC,EAAD,CAAM1C,UAAY,OAAOgC,YAAeU,EAAKA,KAAMJ,YAAcI,EAAKJ,YAAaxB,QAAWX,EAAMW,aACtG,OACE,yBAAKd,UAAY,YACdyC,EACD,kBAAC,IAAD,CAAMxC,GAAG,KACP,4BAAQD,UAAW,gBAAnB,yB,OCgJK2C,E,YA9Jb,aAAc,IAAD,8BACX,+CACK5B,MAAQ,CACXC,OAAQ,GACRC,WAAY,GACZC,OAAQ,GACRC,WAAY,GACZC,WAAY,CAACf,QAAS,IACtBO,SAAU,GACV4B,KAAM,GACNF,YAAa,GAEf,EAAK3B,aAAe,EAAKA,aAAaiC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAbR,E,0EAgBAP,EAAYzB,EAAUJ,GACjC,IAAIsC,EAAc,IAElB,SAAgCtC,EAAMuC,GACpC,IAAIzB,EACJ,IAAKA,EAAI,EAAGA,EAAIyB,EAAKhB,OAAQT,IAC3B,GAAIyB,EAAKzB,GAAGd,MAAQA,EAChB,OAAO,EAGb,OAAO,GAGLwC,CAAuBxC,EAAMI,KAC7BA,EACEA,EAASqB,QAAO,SAASC,EAAOC,EAAOC,GACrC,OAAOF,EAAM1B,MAAQA,OAI3BsC,EAAclC,GACFqC,KAAK,CACfzC,KAAMA,EACN6B,WAAYA,IAGhBa,KAAKC,UAAS,SAAAC,GACZ,MAAO,CACLxC,SAAUkC,Q,kCAKJxB,GAAuB,IAAD,OAAnBgB,EAAmB,uDAAL,KAC3B,GAAS,GAALhB,EACF4B,KAAKC,UAAS,SAAAC,GACZ,GAAgC,GAA7BA,EAAUxC,SAASmB,OAGlB,CACF,IAAIsB,EAAUD,EAAUZ,KAExB,OADAa,EAAQC,QAAQ,CAAChB,YAAa,EAAKvB,MAAMuB,YAAY,EAAGI,KAAMU,EAAUxC,WACjE,CACL4B,KAAMa,EACNzC,SAAU,GACV0B,YAAac,EAAUd,YAAc,GARvCiB,MAAM,uDAYP,GAAS,GAALjC,EAAO,CACd,IAAIkC,EAAQ,CAACN,KAAKnC,MAAMC,OAAQkC,KAAKnC,MAAME,WAAYiC,KAAKnC,MAAMG,OAAQgC,KAAKnC,MAAMI,WAAY+B,KAAKnC,MAAMK,YACxGqC,EAAW,GACf,IAAKnC,EAAI,EAAGA,EAAIkC,EAAMzB,OAAQT,IAAI,CAChC,IAAIjB,EAAUmD,EAAMlC,GAAGjB,QACnBqD,EAASC,KAAKC,MAAMD,KAAKD,UAAU,EAAIrD,EAAQ0B,SACnD0B,EAASH,QAAQ,CACf9C,KAAMgD,EAAMlC,GAAGd,KACf6B,WAAYhC,EAAQqD,KAGxBR,KAAKC,UAAS,SAAAC,GACZ,IAAIC,EAAUD,EAAUZ,KAExB,OADAa,EAAQC,QAAQ,CAAChB,YAAa,EAAKvB,MAAMuB,YAAc,EAAGI,KAAMe,IACzD,CACLjB,KAAMa,EACNzC,SAAU,GACV0B,YAAac,EAAUd,YAAc,WAI7B,GAALhB,GACP4B,KAAKC,UAAS,SAAAC,GACZ,IAGIS,EAHAR,EAAUD,EAAUZ,KAAKP,QAAO,SAASC,EAAOC,EAAOC,GACvD,OAAOF,EAAMI,aAAeA,KAOhC,OAJAuB,EAAMT,EAAUd,YACM,GAAlBe,EAAQtB,SACV8B,EAAM,GAED,CACLrB,KAAMa,EACNzC,SAAU,GACV0B,YAAauB,Q,0CAMD,IAAD,OACbC,EAAeC,MAAM,+CACrBC,EAAoBD,MAAM,mDAC1BE,EAAeF,MAAM,+CACrBG,EAAoBH,MAAM,mDAC1BI,EAAoBJ,MAAM,mDAE9BK,QAAQ5C,IAAI,CAACsC,EAAcE,EAAmBC,EAAcC,EAAmBC,IAC5EE,MAAK,SAAAC,GAAS,OAAIF,QAAQ5C,IAAI8C,EAAUhE,KAAI,SAAAiE,GAAQ,OAAEA,EAASC,cAC/DH,MAAK,SAAAC,GACF,EAAKnB,SAAS,CAACnC,OAAS,CACtBR,KAAM,QACNH,QAASiE,EAAU,MAErB,EAAKnB,SAAS,CAAClC,WAAa,CAC1BT,KAAM,aACNH,QAASiE,EAAU,MAErB,EAAKnB,SAAS,CAACjC,OAAS,CACtBV,KAAM,QACNH,QAASiE,EAAU,MAErB,EAAKnB,SAAS,CAAChC,WAAa,CAC1BX,KAAM,YACNH,QAASiE,EAAU,MAErB,EAAKnB,SAAS,CAAC/B,WAAa,CAC1BZ,KAAM,YACNH,QAASiE,EAAU,W,+BAIpB,IAAD,OACN,OAA4C,GAAxCpB,KAAKnC,MAAMK,WAAWf,QAAQ0B,OACzB,yBAAK/B,UAAY,WAAU,2CAIhC,yBAAKA,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyE,KAAK,IAAIC,OAAK,EAACC,OAAU,SAACxE,GAAD,OAC9B,kBAAC,EAAD,iBAAWA,EAAX,CAAkBY,MAAS,EAAKA,MAAOJ,aAAgB,EAAKA,aAAcG,QAAW,EAAK+B,kBAC5F,kBAAC,IAAD,CAAO4B,KAAK,YAAYE,OAAQ,SAACxE,GAAD,OAAW,kBAAC,EAAD,iBAAcA,EAAd,CAAqBqC,KAAQ,EAAKzB,MAAMyB,KAAM1B,QAAW,EAAK+B,yB,GAtJrG+B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.0fb05f1b.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport \"./App.css\";\n\nfunction Navbar(){\n  return( \n      <nav className = \"navbar\">\n        <Link to=\"/\" className = \"order\">Order</Link>\n        <ul className = \"right\">\n          <li><Link to= \"/MyOrders\">MyOrders</Link></li>\n        </ul>\n      </nav>\n  )\n}\n\nexport default Navbar;","import React from 'react';\nimport \"./App.css\";\n\nfunction Category(props){\n  const optionComponents = props.options.map(option =>\n    <div className =\"ingredientComponent\">\n      <input type=\"radio\" name= {props.type} onChange = {()=>props.handleChange(option, props.selected, props.type)}/>  {option.name}\n    </div>\n  )\n  return (\n    <div>\n      <h3>Select your {props.type}</h3>\n      {optionComponents}\n    </div>\n  )\n}\n\nexport default Category;","import React from 'react';\nimport \"./App.css\";\nimport Category from \"./Category\";\nimport { Link } from 'react-router-dom';\n\nfunction Order(props){\n  return (\n    <div className = \"Order\">\n      <Link to=\"/MyOrders\">\n        <button onClick = {()=>props.onClick(2)}>Surprise me with a taco!</button>\n      </Link>\n      <h2>Make your own taco</h2>\n      <Category type= {props.state.shells.type} options = {props.state.shells.options} selected = {props.state.selected} handleChange = {props.handleChange}/>\n      <Category type= {props.state.baseLayers.type} options = {props.state.baseLayers.options} selected = {props.state.selected} handleChange = {props.handleChange}/>\n      <Category type= {props.state.mixins.type} options = {props.state.mixins.options} selected = {props.state.selected} handleChange = {props.handleChange}/>\n      <Category type= {props.state.condiments.type} options = {props.state.condiments.options} selected = {props.state.selected} handleChange = {props.handleChange}/>\n      <Category type= {props.state.seasonings.type} options = {props.state.seasonings.options} selected = {props.state.selected} handleChange = {props.handleChange}/>\n      <div className= \"bottomButton\">\n        <Link to=\"/MyOrders\">\n          <button onClick = {()=>props.onClick(1)}>Make my taco! </button>\n        </Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Order;","import React from 'react';\nimport \"./App.css\";\n\nfunction Taco(props){\n  let all = {\n    shell: \"no\",\n    baseLayer: \"no\",\n    mixin: \"no\",\n    condiment: \"no\",\n    seasoning: \"no\"\n  };\n  let i;\n  let items;\n  let categories = [\"shell\", \"baseLayer\", \"mixin\", \"condiment\", \"seasoning\"];\n  for (i = 0; i < categories.length; i++){\n    items = props.ingredients.filter(function(value, index, arr){\n      return value.type == categories[i];\n    })\n    if (items.length!= 0){\n      all[categories[i]] = items[0].ingredient.name;\n    }\n  }\n\n  return (\n    <div>\n      <h2>Order #{props.orderNumber}</h2>\n      <p>Delicious, freshly made taco with {all.shell} shell, {all.baseLayer} baseLayer, {all.mixin} mixin, {all.condiment} condiment, \n      and {all.seasoning} seasoning.</p>\n      <button className = \"eatButton\" onClick = {()=>props.onClick(3, props.orderNumber)}>Eat this order</button>\n    </div>\n    )\n}\n\nexport default Taco;","import React from 'react';\nimport \"./App.css\";\nimport Taco from \"./Taco\";\nimport { Link } from 'react-router-dom';\n\nfunction MyOrders(props){\n  if (props.made.length == 0){\n    return (\n      <div className = \"MyOrders\">\n        <h2>No orders yet</h2>\n        <Link to=\"/\">\n          <button >Order a taco</button>\n        </Link>\n      </div>\n    )\n  }\n  else{\n    const tacos = props.made.map((taco)=>\n      <Taco className = \"Taco\" ingredients = {taco.taco} orderNumber ={taco.orderNumber} onClick = {props.onClick}/>)\n    return(\n      <div className = \"MyOrders\">\n        {tacos}\n        <Link to=\"/\">\n          <button className= \"bottomButton\">Order another taco</button>\n        </Link>\n      </div>\n    )\n  }\n}\n\nexport default MyOrders;","import React from 'react';\nimport Navbar from \"./Navbar\";\nimport Order from \"./Order\";\nimport MyOrders from \"./MyOrders\";\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      shells: {},\n      baseLayers: {},\n      mixins: {},\n      condiments: {},\n      seasonings: {options: []},\n      selected: [], \n      made: [], \n      orderNumber: 0\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange(ingredient, selected, type){\n    let newSelected = [];\n\n    function containsIngredientType(type, list) {\n      var i;\n      for (i = 0; i < list.length; i++) {\n        if (list[i].type == type) {\n            return true;\n        }\n      }\n      return false;\n    }\n\n    if (containsIngredientType(type, selected)){\n        selected = \n          selected.filter(function(value, index, arr){\n            return value.type != type;\n        })\n    }\n\n      newSelected = selected;\n      newSelected.push({\n        type: type,\n        ingredient: ingredient});\n    \n\n    this.setState(prevState =>{\n      return {\n        selected: newSelected\n      }\n    })\n  }\n\n  handleClick(i, orderNumber = null){\n    if (i == 1){\n      this.setState(prevState =>{\n        if(prevState.selected.length == 0){\n          alert(\"We couldn't make a taco with no ingredients\")\n        }\n        else{\n          let newMade = prevState.made;\n          newMade.unshift({orderNumber: this.state.orderNumber+1, taco: prevState.selected});\n          return {\n            made: newMade,\n            selected: [],\n            orderNumber: prevState.orderNumber + 1\n          }}})\n        }\n    \n    else if (i == 2){\n      let types = [this.state.shells, this.state.baseLayers, this.state.mixins, this.state.condiments, this.state.seasonings];\n      let justMade = [];\n      for (i = 0; i < types.length; i++){\n        let options = types[i].options;\n        let random = Math.floor(Math.random()*(0 + options.length));\n        justMade.unshift({\n          type: types[i].type,\n          ingredient: options[random]\n        })\n      }\n      this.setState(prevState=>{\n        let newMade = prevState.made;\n        newMade.unshift({orderNumber: this.state.orderNumber + 1, taco: justMade})\n        return {\n          made: newMade,\n          selected: [],\n          orderNumber: prevState.orderNumber + 1\n        }\n      })\n    }\n    else if (i == 3){\n      this.setState(prevState=>{\n        let newMade = prevState.made.filter(function(value, index, arr){\n            return value.orderNumber != orderNumber;\n        });\n        let num;\n        num = prevState.orderNumber;\n        if (newMade.length == 0){\n          num = 0\n        }\n        return {\n          made: newMade,\n          selected: [],\n          orderNumber: num\n        }\n      })\n    }\n  }\n\n  componentDidMount(){\n    let shellAPICall = fetch(\"https://ct-tacoapi.azurewebsites.net/shells\")\n    let baseLayersAPICall = fetch(\"https://ct-tacoapi.azurewebsites.net/baseLayers\")\n    let mixinAPICall = fetch(\"https://ct-tacoapi.azurewebsites.net/mixins\")\n    let condimentsAPICall = fetch(\"https://ct-tacoapi.azurewebsites.net/condiments\")\n    let seasoningsAPICall = fetch(\"https://ct-tacoapi.azurewebsites.net/seasonings\")\n\n    Promise.all([shellAPICall, baseLayersAPICall, mixinAPICall, condimentsAPICall, seasoningsAPICall])\n      .then(responses => Promise.all(responses.map(response=>response.json())))\n      .then(responses => {\n          this.setState({shells : {\n            type: \"shell\",\n            options: responses[0]\n          }});\n          this.setState({baseLayers : {\n            type: \"base layer\",\n            options: responses[1]\n          }});\n          this.setState({mixins : {\n            type: \"mixin\",\n            options: responses[2]\n          }});\n          this.setState({condiments : {\n            type: \"condiment\",\n            options: responses[3]\n          }});\n          this.setState({seasonings : {\n            type: \"seasoning\",\n            options: responses[4]\n          }});\n    })\n}\n  render(){\n    if (this.state.seasonings.options.length == 0){\n      return <div className = \"Loading\"><h1>Loading...</h1></div>;\n    }\n    else{\n      return(\n        <div className=\"App\">\n          <Router>\n            <Navbar />\n            <Switch>\n              <Route path=\"/\" exact render = {(props) => \n                <Order {...props} state = {this.state} handleChange = {this.handleChange} onClick = {this.handleClick}/>}/>\n              <Route path=\"/MyOrders\" render={(props) => <MyOrders {...props} made = {this.state.made} onClick = {this.handleClick}/>}/>\n            </Switch>\n          </Router>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import { Provider } from 'react-redux';\n//import { createStore } from 'redux';\n//import reducer from \"./reducer\";\n\n//const store = createStore(reducer); \nReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}